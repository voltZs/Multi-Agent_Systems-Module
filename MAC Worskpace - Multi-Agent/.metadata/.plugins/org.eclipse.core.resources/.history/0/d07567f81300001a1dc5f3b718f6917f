package mas.coursework;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import mas.coursework_ontology.elements.Component;
import mas.coursework_ontology.elements.OrderPair;
import mas.coursework_ontology.elements.SellComponents;

public class Warehouse {
	int dailyCharge;
	HashMap<String, WarehouseSection> sections;
	ArrayList<SellComponents> purchasedToday;
	
	public Warehouse(int dailyCharge){
		this.dailyCharge = dailyCharge;
		
		sections = new HashMap<>();
		purchasedToday = new ArrayList<>();
	}
	
	public Double calculateStorageCharge(){
		Double charge = 0.0;
		for (String sectionType : sections.keySet()){
			charge += sections.get(sectionType).sumSectionCharges();
		}
		return charge;
	}
	
	
	public void addToWarehouse(Component newComponent, int deliveryTime){
		String type = newComponent.getType();
		if(sections.get(type) == null){
			sections.put(type, new WarehouseSection());
		}
		sections.get(type).addToSection(newComponent, deliveryTime);
	}
	
	/*
	 * Return the amount of items with specs in stock
	 */
	public int checkStock(String type, String identifier){
		int amount = 0;
		WarehouseSection section = sections.get(type);
		if(section != null){
			amount += section.checkSectionStock(identifier);
		}
		return amount;
	}
	
	/*
	 * Increment number of days stored for every item in warehouse
	 */
	public void incrementNewDay(){
		for(String sectionType : sections.keySet()){
			sections.get(sectionType).incrementNewDay();
		}
		purchasedToday.clear();
	}
	
	public String toString(){
		String result = "";
		result += "====== Warehouse stock ======\n";
		for(String sectionType : sections.keySet()){
			result += ("Section: "+ sectionType + "\n");
			result += sections.get(sectionType).toString();
		}
		result += "=============================";
		return result;
	}
	
//	INNER CLASS ======================================
	private class WarehouseSection{
		HashMap<String, Aisle> aisles;
		public WarehouseSection(){
			aisles = new HashMap<>();
		}
		
		public void incrementNewDay() {
			for( String aisleIdentifier : aisles.keySet()){
				aisles.get(aisleIdentifier).incrementNewDay();
			}
		}

		public Double sumSectionCharges(){
			Double sum = 0.00;
			for(String aisleIdentifier: aisles.keySet()){
				sum += aisles.get(aisleIdentifier).sumAisleCharges();
			}
			return sum;
		}
		
		public void addToSection(Component comp, int deliveryTime){
			String compIdentifier = comp.getIdentifier();
			if(aisles.get(compIdentifier) == null){
				aisles.put(compIdentifier, new Aisle());
			}
			aisles.get(compIdentifier).addToAisle(comp, deliveryTime);
		}
		
		public int checkSectionStock(String identifier) {
			int sectionAmount = 0;
			Aisle aisle = aisles.get(identifier);
			if(aisle != null){
				sectionAmount = aisle.checkAisleStock();
			}
			return sectionAmount;
		}
		
		public String toString(){
			String result = "";
			for(String aisleIdentifier : aisles.keySet()){; 
				result+= "\tAisle: " + aisleIdentifier + "\n";
				result+= aisles.get(aisleIdentifier).toString();
			}
			return result;
		}

		
//		INNER INNER CLASS ======================================
		private class Aisle{
//			HashMap<Component, Integer> stock;
			ArrayList<WarehouseItem> stock;
			
			public Aisle(){
				stock = new ArrayList<>();
			}

			public void incrementNewDay() {
				for(WarehouseItem wItem : stock){
					int currentAmnt = wItem.daysStored;
					wItem.daysStored = wItem.daysStored + 1;
				}
			}

			public Double sumAisleCharges(){
				Double sum = 0.0;
				for(WarehouseItem wItem : stock){
//					Adding 1 as this is called before teh day is incremented, and any items not used on 
//					the day the arrive (0 days stored) they should be charged for this
//					Also days can be negative - not arrived yet, charges for this should not bbe calculated
					int daysStored = wItem.daysStored + 1;
					if (daysStored > 0){
						sum += dailyCharge;
					}
				}
				return sum;
			}

			public void addToAisle(Component comp, int deliveryTime) {
				stock.add(new WarehouseItem(comp, deliveryTime));
			}
			
			public int checkAisleStock() {
				return stock.size();
			}
			
			public String toString(){
				String result = "";
				for(WarehouseItem wItem : stock){
					result+= "\t\t" + wItem.component + " - days stored: " + wItem.daysStored + "\n";
				}
				return result;
			}
			
//			INNER INNER INNER CLASS ============
			private class WarehouseItem{
				public Component component;
				public int daysStored;
				
				public WarehouseItem(Component cmp, int days){
					this.component = cmp;
					this.daysStored = days;
				}
			}
		}
	}

	public void receiveComponents(SellComponents order) {
		for(OrderPair pair: order.getOrderPairs()){
			Component comp = (Component) pair.getOrderedItem();
			int amount = pair.getQuantity();
			System.out.println("Adding " + amount + " of " + comp.getType() + ", " + comp.getIdentifier());
			for(int i=0; i<amount; i++){
				 addToWarehouse(comp, order.getDeliveryTime());
			}
		}
//		also keep track of what component orders were received from suppliers today - this is cleared every time a new day is incremented
		purchasedToday.add(order);
	}
	
	public ArrayList<SellComponents> getTodaysPurchases(){
		return purchasedToday;
	}
}
