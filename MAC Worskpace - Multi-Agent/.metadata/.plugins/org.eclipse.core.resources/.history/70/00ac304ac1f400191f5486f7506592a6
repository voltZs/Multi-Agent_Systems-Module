package mas.coursework;

import java.util.ArrayList;

import jade.content.ContentElement;
import jade.content.lang.Codec;
import jade.content.lang.Codec.CodecException;
import jade.content.lang.sl.SLCodec;
import jade.content.onto.Ontology;
import jade.content.onto.OntologyException;
import jade.content.onto.basic.Action;
import jade.core.AID;
import jade.core.Agent;
import jade.core.behaviours.Behaviour;
import jade.core.behaviours.CyclicBehaviour;
import jade.core.behaviours.OneShotBehaviour;
import jade.core.behaviours.SequentialBehaviour;
import jade.domain.DFService;
import jade.domain.FIPAException;
import jade.domain.FIPAAgentManagement.DFAgentDescription;
import jade.domain.FIPAAgentManagement.ServiceDescription;
import jade.lang.acl.ACLMessage;
import jade.lang.acl.MessageTemplate;
import mas.coursework.SupplierAgent.CalendarListenerBehaviour;
import mas.coursework.SupplierAgent.EndDayListener;
import mas.coursework.SupplierAgent.OrderProcessingListener;
import mas.coursework.SupplierAgent.StockCheckingListener;
import mas.coursework_ontology.SupplyChainOntology;
import mas.coursework_ontology.elements.CalendarNotification;
import mas.coursework_ontology.elements.SellPhones;

public class CustomerAgent extends Agent{
	
	private Codec codec = new SLCodec();
	private Ontology ontology = SupplyChainOntology.getInstance();
	
	private AID tickerAgent;
	private AID manufacturerAgent;
	
	protected void setup(){
		getContentManager().registerLanguage(codec);
		getContentManager().registerOntology(ontology);
		String[] args = (String[])this.getArguments();
		
		DFAgentDescription dfad = new DFAgentDescription();
		dfad.setName(getAID());
		ServiceDescription sd = new ServiceDescription();
		sd.setType("customer-agent");
		sd.setName(getLocalName() + "-customer-agent");
		dfad.addServices(sd);
		try {
			DFService.register(this, dfad);
		} catch (FIPAException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		addBehaviour(new CalendarListenerBehaviour(this));
	}
	
	public class CalendarListenerBehaviour extends CyclicBehaviour{
		public CalendarListenerBehaviour(Agent a){
			super(a);
		}
		
		@Override
		public void action() {
	//		Listen to new day message
			MessageTemplate mt = MessageTemplate.MatchPerformative(ACLMessage.INFORM); 
			ACLMessage message = receive(mt);
	//		if message received, 
			if(message != null){
				try {
					ContentElement ce = null;
					ce = getContentManager().extractContent(message);
					if (ce instanceof CalendarNotification) {
						CalendarNotification notif = (CalendarNotification) ce;
						boolean newDay = notif.isNewDay();
						boolean done = notif.isDone();
						if(newDay){
//							set tickerAgent
//							we nest this in here because only tickerAgents send calendarNotifications with newDay set true
							if(tickerAgent == null){
								tickerAgent = message.getSender();
							}
							
							SequentialBehaviour makeOrder = new SequentialBehaviour(myAgent);
							makeOrder.addSubBehaviour(new GenerateOrder(myAgent));
							makeOrder.addSubBehaviour(new OrderResponseListener(myAgent));
						} else if(done){
//							not a new day and done is true -> simulation must be over
							myAgent.doDelete();
						}
					}
				}
				catch (CodecException ce) {
					ce.printStackTrace();
				}
				catch (OntologyException oe) {
					oe.printStackTrace();
				}
			}
			else{
				block();
			}
		}
	}
	
	public class GenerateOrder extends OneShotBehaviour{
		
		public GenerateOrder(Agent a){
			super(a);
		}

		@Override
		public void action() {
//			create order and submit to manufacturer agent
			DFAgentDescription dfd = new DFAgentDescription();
			ServiceDescription sd = new ServiceDescription();
			sd.setType("manufacturer");
			dfd.addServices(sd);
			try {
				DFAgentDescription[] manufacturerAgents = DFService.search(myAgent, dfd);
				manufacturerAgent = manufacturerAgents[0].getName();
			} catch (FIPAException e) {
				e.printStackTrace();
			}
			
			PhoneOrderGenerator generator = new PhoneOrderGenerator();
			SellPhones order = generator.getOrder();
			// Prepare the action request message
			ACLMessage msg = new ACLMessage(ACLMessage.REQUEST);
			msg.addReceiver(manufacturerAgent);
			msg.setLanguage(codec.getName());
			msg.setOntology(ontology.getName());
			// Prepare the content.
			CD cd = new CD();
			cd.setName("Synchronicity");
			cd.setSerialNumber(123);
			ArrayList<Track> tracks = new ArrayList<Track>();
			Track t = new Track();
			t.setName("Every breath you take");
			t.setDuration(230);
			tracks.add(t);
			t = new Track();
			t.setName("King of pain");
			t.setDuration(500);
			tracks.add(t);
			cd.setTracks(tracks);
			Sell order = new Sell();
			order.setBuyer(myAgent.getAID());
			order.setItem(cd);

			// IMPORTANT: According to FIPA, we need to create a wrapper Action
			// object
			// with the action and the AID of the agent
			// we are requesting to perform the action
			// you will get an exception if you try to send the sell action
			// directly
			// not inside the wrapper!!!
			Action request = new Action();
			request.setAction(order);
			request.setActor(sellerAID); // the agent that you request to
											// perform the action
			try {
				// Let JADE convert from Java objects to string
				getContentManager().fillContent(msg, request); // send the
																// wrapper
																// object
				send(msg);
			} catch (CodecException ce) {
				ce.printStackTrace();
			} catch (OntologyException oe) {
				oe.printStackTrace();
			}
		}
	}
	
	public class OrderResponseListener extends Behaviour{
		
		private boolean responseReceived = false;
		
		public OrderResponseListener(Agent a){
			super(a);
		}

		@Override
		public void action() {
//			listen to order confirmation, if received, send dayDone message
			
		}

		@Override
		public boolean done() {
			return responseReceived;
		}
	}
}
