package mas.coursework;

import java.util.ArrayList;
import java.util.HashMap;

import jade.content.onto.OntologyException;
import jade.core.AID;
import mas.coursework_ontology.elements.Component;
import mas.coursework_ontology.elements.HasInStock;
import mas.coursework_ontology.elements.OrderPair;
import mas.coursework_ontology.elements.SellComponents;
import mas.coursework_ontology.elements.SellPhones;

public class ProfitBrain {
	private ArrayList<Double> dailyProfits;
	private HashMap<String, HashMap> componentMarket = new HashMap<>();
	
	public ProfitBrain(){
		dailyProfits = new ArrayList<>();
		componentMarket = new HashMap<>();
	}
	
	/*
	 * Returns boolean - whether order is perceived to increase profit
	 */
	public boolean decideOnPhoneOrder(SellPhones order, PhoneOrdersManager manager) {
		return true;
	}

	public ArrayList<SellComponents> decideWhatToOrder(Warehouse warehouse, PhoneOrdersManager phoneOrdersMngr) {
		ArrayList<SellComponents> componentsToOrder = new ArrayList<>();
//		Right now just orders all components for phones that were ordered today
//		AND ONLY ORDERS COMPONENTS FROM SUPPLIER ONE - NEEDS TO BBE CHANGED !!!  - based on buying options in componentMarket HashMap
		SellComponents componentsOrder1 = new SellComponents();
		ArrayList<OrderPair> orderPairs = new ArrayList<>();
		OrderPair pair = new OrderPair();
		
		for(SellPhones phoneOrder : phoneOrdersMngr.getNewOrders()){
			int amount = phoneOrder.getQuantity();
			try {
//				add screen
				pair = new OrderPair();
				pair.setOrderedItem(phoneOrder.getPhone().getScreen());
				pair.setQuantity(amount);
				orderPairs.add(pair);
//				add ram
				pair = new OrderPair();
				pair.setOrderedItem(phoneOrder.getPhone().getRam());
				pair.setQuantity(amount);
				orderPairs.add(pair);
//				add battery
				pair = new OrderPair();
				pair.setOrderedItem(phoneOrder.getPhone().getBattery());
				pair.setQuantity(amount);
				orderPairs.add(pair);
//				add storage
				pair = new OrderPair();
				pair.setOrderedItem(phoneOrder.getPhone().getStorage());
				pair.setQuantity(amount);
				orderPairs.add(pair);
			} catch (OntologyException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		componentsOrder1.setOrderPairs(orderPairs);
		
		return componentsToOrder;
	}
	
	public ArrayList<Double> getDailyProfits(){
		return dailyProfits;
	}
	
	public void todaysProfit(Warehouse warehouse, PhoneOrdersManager phoneOrdersMngr) {
		Double totalOrdersShipped = totalValueOfOrdersShipped();
		Double lateOrderCharges= phoneOrdersMngr.calculateLateOrders();
		Double storageCharges = warehouse.calculateStorageCharge();
		Double componentPurchases = componentPurchaseValue(warehouse.getTodaysPurchases());
		System.out.println("Shipped orders: "+ totalOrdersShipped+ "\n" +
							"Late orders: "+ lateOrderCharges+ "\n" +
							"Storage chrgs: "+ storageCharges+ "\n" +
							"Component prchss: "+ componentPurchases + "\n");
		Double todaysProfit = totalOrdersShipped - lateOrderCharges -storageCharges - componentPurchases;
		
		dailyProfits.add(todaysProfit);
	}
	
	private Double totalValueOfOrdersShipped() {
		return 0.0;
	}

	private Double componentPurchaseValue(ArrayList<SellComponents> todaysPurchases) {
		Double sum = 0.0;
		for(SellComponents order : todaysPurchases){
			AID seller = order.getSeller();
			for (OrderPair pair : order.getOrderPairs()){
				int amnt = pair.getQuantity();
				Component comp = (Component) pair.getOrderedItem();
				for(int i=0; i<amnt; i++){
					ArrayList<BuyingOption> options = (ArrayList<BuyingOption>) componentMarket.get(comp.getType()).get(comp.getIdentifier());
					for (BuyingOption option : options){
						if(option.supplierID == seller){
							sum += option.price;
							break;
						}
					}
				}
			}
		}
		return sum;
	}

	public void updateComponentMarket(HasInStock stockUpdate){
		Component comp = (Component) stockUpdate.getItem();
		int deliveryTime = stockUpdate.getDeliveryTime();
		int price = stockUpdate.getPrice();
		AID seller = stockUpdate.getOwner();
		BuyingOption option = new BuyingOption(seller, price, deliveryTime);
		
		System.out.println("Adding " + comp + " price " + price + " seller " + seller);
		
		
		HashMap<String, ArrayList> optionsByType = componentMarket.get(comp.getType());
		ArrayList<BuyingOption> optionsByIdent = null;
		if(optionsByType == null){
			optionsByType = new HashMap<>();
			componentMarket.put(comp.getType(), optionsByType);
		} else {
			optionsByIdent = optionsByType.get(comp.getIdentifier());
		}
		if(optionsByIdent == null){
			optionsByIdent = new ArrayList<>();
			componentMarket.get(comp.getType()).put(comp.getIdentifier(), optionsByIdent);
		} else {
//			options for this component already exist - check if this specific option is existent
			for(BuyingOption existingOpt : optionsByIdent){
				if(existingOpt.supplierID.equals(option.supplierID)){
					return;
				}
				optionsByIdent.add(option);
			}
		}
	}
	
	private class BuyingOption{
		public AID supplierID;
		public int price;
		public int deliveryTime;	
		
		public BuyingOption(AID supplierID, int price, int deliveryTime){
			this.supplierID = supplierID;
			this.price = price;
			this.deliveryTime = deliveryTime;
		}
	}

}


